// <auto-generated />
using System;
using HotDeskApplicationApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HotDeskApplicationApi.Migrations
{
    [DbContext(typeof(HotDeskDbContext))]
    partial class HotDeskDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HotDeskApplicationApi.Models.Desk", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FloorID")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("OfficeID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.ToTable("Desks");

                    b.HasData(
                        new
                        {
                            ID = new Guid("2803fdf2-9f05-4fa5-86e1-7605893f6dd5"),
                            FloorID = new Guid("2a965ccf-1862-4cb7-9731-c376bf299611"),
                            Name = "PP1",
                            OfficeID = new Guid("49a001b2-5cd5-41c8-b640-a77d2e17f546")
                        },
                        new
                        {
                            ID = new Guid("96fa07a0-adf0-48ea-a2eb-01d5d34b0284"),
                            FloorID = new Guid("2a965ccf-1862-4cb7-9731-c376bf299611"),
                            Name = "PP2",
                            OfficeID = new Guid("49a001b2-5cd5-41c8-b640-a77d2e17f546")
                        },
                        new
                        {
                            ID = new Guid("2264edff-53ee-40dc-99d4-fbf19af30993"),
                            FloorID = new Guid("2a965ccf-1862-4cb7-9731-c376bf299611"),
                            Name = "PP3",
                            OfficeID = new Guid("49a001b2-5cd5-41c8-b640-a77d2e17f546")
                        },
                        new
                        {
                            ID = new Guid("65ce6d9b-9c61-4cc3-965d-ce5ee6727c8b"),
                            FloorID = new Guid("2a965ccf-1862-4cb7-9731-c376bf299611"),
                            Name = "PP4",
                            OfficeID = new Guid("49a001b2-5cd5-41c8-b640-a77d2e17f546")
                        },
                        new
                        {
                            ID = new Guid("7661a08b-b64a-4587-8f69-cf18903ff4be"),
                            FloorID = new Guid("2a965ccf-1862-4cb7-9731-c376bf299611"),
                            Name = "PP5",
                            OfficeID = new Guid("49a001b2-5cd5-41c8-b640-a77d2e17f546")
                        },
                        new
                        {
                            ID = new Guid("b884a355-0968-440f-a15e-b617a3df61f4"),
                            FloorID = new Guid("b417af8e-66e0-4f83-9f94-cbf06fe92824"),
                            Name = "PE11",
                            OfficeID = new Guid("49a001b2-5cd5-41c8-b640-a77d2e17f546")
                        },
                        new
                        {
                            ID = new Guid("2de9491c-be24-4a14-beef-794eaaa03473"),
                            FloorID = new Guid("b417af8e-66e0-4f83-9f94-cbf06fe92824"),
                            Name = "PE12",
                            OfficeID = new Guid("49a001b2-5cd5-41c8-b640-a77d2e17f546")
                        },
                        new
                        {
                            ID = new Guid("7474e87e-fbb5-4186-902d-64f223316ea2"),
                            FloorID = new Guid("b417af8e-66e0-4f83-9f94-cbf06fe92824"),
                            Name = "PE13",
                            OfficeID = new Guid("49a001b2-5cd5-41c8-b640-a77d2e17f546")
                        },
                        new
                        {
                            ID = new Guid("6630a06e-0b86-472e-8384-580144d2a06a"),
                            FloorID = new Guid("b417af8e-66e0-4f83-9f94-cbf06fe92824"),
                            Name = "PE14",
                            OfficeID = new Guid("49a001b2-5cd5-41c8-b640-a77d2e17f546")
                        },
                        new
                        {
                            ID = new Guid("b9469428-42b3-42f6-911b-8e7eb28fe8aa"),
                            FloorID = new Guid("da3e4963-e5c6-4db1-b0cd-a93f21154cd0"),
                            Name = "PE21",
                            OfficeID = new Guid("49a001b2-5cd5-41c8-b640-a77d2e17f546")
                        },
                        new
                        {
                            ID = new Guid("b3222f2b-1454-4a06-880c-11f464a8bdca"),
                            FloorID = new Guid("da3e4963-e5c6-4db1-b0cd-a93f21154cd0"),
                            Name = "PE22",
                            OfficeID = new Guid("49a001b2-5cd5-41c8-b640-a77d2e17f546")
                        },
                        new
                        {
                            ID = new Guid("fda0778f-3b18-42e8-a2c5-f597118a8020"),
                            FloorID = new Guid("da3e4963-e5c6-4db1-b0cd-a93f21154cd0"),
                            Name = "PE23",
                            OfficeID = new Guid("49a001b2-5cd5-41c8-b640-a77d2e17f546")
                        },
                        new
                        {
                            ID = new Guid("e3625eaa-eefb-4a97-885a-194d18ce91e1"),
                            FloorID = new Guid("da3e4963-e5c6-4db1-b0cd-a93f21154cd0"),
                            Name = "PE24",
                            OfficeID = new Guid("49a001b2-5cd5-41c8-b640-a77d2e17f546")
                        },
                        new
                        {
                            ID = new Guid("fb45eca2-53f7-4caa-b811-658fbf1b4be2"),
                            FloorID = new Guid("ffe7527f-b3c3-480f-8c50-6538fbf832ed"),
                            Name = "BE13",
                            OfficeID = new Guid("e9d74e64-823f-4eb8-a9fb-18bc59a8e5e9")
                        },
                        new
                        {
                            ID = new Guid("fc8f5007-277c-4836-a7f5-ef88b0028de6"),
                            FloorID = new Guid("ffe7527f-b3c3-480f-8c50-6538fbf832ed"),
                            Name = "BE14",
                            OfficeID = new Guid("e9d74e64-823f-4eb8-a9fb-18bc59a8e5e9")
                        },
                        new
                        {
                            ID = new Guid("893c7450-576b-4e75-b89c-aa8f2b55f360"),
                            FloorID = new Guid("ef7df01f-276d-4b64-ad3a-87fdcaaa7b24"),
                            Name = "BE21",
                            OfficeID = new Guid("e9d74e64-823f-4eb8-a9fb-18bc59a8e5e9")
                        },
                        new
                        {
                            ID = new Guid("dadd6897-4a03-463a-8bcd-3f04d30e4630"),
                            FloorID = new Guid("ef7df01f-276d-4b64-ad3a-87fdcaaa7b24"),
                            Name = "BE22",
                            OfficeID = new Guid("e9d74e64-823f-4eb8-a9fb-18bc59a8e5e9")
                        },
                        new
                        {
                            ID = new Guid("43268651-56fb-47fb-9b42-43ed0d5a28cd"),
                            FloorID = new Guid("ef7df01f-276d-4b64-ad3a-87fdcaaa7b24"),
                            Name = "BE23",
                            OfficeID = new Guid("e9d74e64-823f-4eb8-a9fb-18bc59a8e5e9")
                        },
                        new
                        {
                            ID = new Guid("cab137b2-5385-4b05-adc7-5c56c9d16076"),
                            FloorID = new Guid("ef7df01f-276d-4b64-ad3a-87fdcaaa7b24"),
                            Name = "BE24",
                            OfficeID = new Guid("e9d74e64-823f-4eb8-a9fb-18bc59a8e5e9")
                        });
                });

            modelBuilder.Entity("HotDeskApplicationApi.Models.Floor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("OfficeID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            ID = new Guid("2a965ccf-1862-4cb7-9731-c376bf299611"),
                            Name = "Ground Floor",
                            OfficeID = new Guid("49a001b2-5cd5-41c8-b640-a77d2e17f546")
                        },
                        new
                        {
                            ID = new Guid("b417af8e-66e0-4f83-9f94-cbf06fe92824"),
                            Name = "Floor 1",
                            OfficeID = new Guid("49a001b2-5cd5-41c8-b640-a77d2e17f546")
                        },
                        new
                        {
                            ID = new Guid("da3e4963-e5c6-4db1-b0cd-a93f21154cd0"),
                            Name = "Floor 2",
                            OfficeID = new Guid("49a001b2-5cd5-41c8-b640-a77d2e17f546")
                        },
                        new
                        {
                            ID = new Guid("ffe7527f-b3c3-480f-8c50-6538fbf832ed"),
                            Name = "Floor 1",
                            OfficeID = new Guid("e9d74e64-823f-4eb8-a9fb-18bc59a8e5e9")
                        },
                        new
                        {
                            ID = new Guid("ef7df01f-276d-4b64-ad3a-87fdcaaa7b24"),
                            Name = "Floor 2",
                            OfficeID = new Guid("e9d74e64-823f-4eb8-a9fb-18bc59a8e5e9")
                        });
                });

            modelBuilder.Entity("HotDeskApplicationApi.Models.Office", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Offices");

                    b.HasData(
                        new
                        {
                            ID = new Guid("49a001b2-5cd5-41c8-b640-a77d2e17f546"),
                            Name = "Predeal"
                        },
                        new
                        {
                            ID = new Guid("e9d74e64-823f-4eb8-a9fb-18bc59a8e5e9"),
                            Name = "Brizei"
                        });
                });

            modelBuilder.Entity("HotDeskApplicationApi.Models.Profile", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("bytea");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("NickName")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("HotDeskApplicationApi.Models.Reservation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DeskID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FloorID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LeavingTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OfficeID")
                        .HasColumnType("uuid");

                    b.Property<string>("ProfileEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
